{% python
from genshi.template import TemplateError
import os
import datetime
execfile(repo+'/Python/00_baseparams.py')
execfile(repo+'/Python/10_funchosts.py')
execfile(repo+'/Python/20_networks.py')
execfile(repo+'/Python/30_networking.py')

timestamp = int(os.path.getmtime(repo+'/Properties/umbrella.xml'))+1000000000
# addition of 1000000000 at the end is to make the transition from
# an old timestamp format (starting with year) easy.

# Here we compute the canonical hostname for this system and collect the
# secondary nameservers.
# The canonical hostname is the one that (hopefully) has proper reverse
# DNS resolution.
# By default the canonical hostname is the smtp hostname at primary domain.
# However, using the revDNS attribute in on domain names in umbrella.xml
# it is possible to set another hostname as canonical.
CANONICAL_hostname=funchostsshort['DMZsmtp']
CANONICAL_domain=domain_name
revDNSseen=False
secondaryNameservers={}
hostname_aliases={}

for domain in metadata.Properties['umbrella.xml'].xdata.findall('domain'):
  if domain.find('master') is None:         # only if we are master of the domain
    d_name=domain.find('name').text.strip()
    # collect hostname aliases for the domain
    aliases_set=set()
    for alias in domain.findall('alias'):
      aliases_set.add(alias.text.strip())
    hostname_aliases[d_name]=aliases_set

    # collect slave nameservers for the domain
    slave_nameservers=set()
    for slave in domain.findall('slave'):
      slave_nameservers.add(slave.text.strip())
    secondaryNameservers[d_name]=slave_nameservers

    # process revDNS and set the canonical hostname
    revDNS=domain.find('revDNS')
    if revDNS is not None:
      if revDNSseen:
        raise TemplateError('"revDNS" is specified for multiple domain names, '
                            'can only be specified for one.')
      revDNSseen=True
      if revDNS.text is not None:
        CANONICAL_hostname=revDNS.text.strip()
      else:
        CANONICAL_hostname=""
      CANONICAL_domain=d_name

# compute canonical fully qualified host name for this system
if CANONICAL_hostname:
  CANONICAL_FQHN = '%s.%s' % (CANONICAL_hostname, CANONICAL_domain)
else:
  CANONICAL_FQHN = CANONICAL_domain
%}\
{% def EXTERNAL_ZONE(ext_ip, ext_domain) %}\
; the external (Internet or inter-corporate net) zone view for
; ${ext_domain} ( note that mail is still handled by the primary
; smtp server at ${CANONICAL_FQHN} )
$$ORIGIN ${ext_domain}.
$$TTL 86400      ; 1 day
${ext_domain}.      IN SOA  ${CANONICAL_FQHN}. itadmins.${domain_name}. (
                                ${timestamp} ; serial
                                28800      ; refresh (8 hours)
                                3600       ; retry (1 hour)
                                1814400    ; expire (3 weeks)
                                86400      ; minimum (1 day)
                                )
                        NS      ${CANONICAL_FQHN}.
{% for secondaryDNS in secondaryNameservers[ext_domain] %}\
                        NS      ${secondaryDNS}.
{% end %}\
                        A       ${ext_ip}
                        MX      5 ${CANONICAL_FQHN}.
                IN      TXT     "v=spfl a mx ~all"
mail._domainkey IN      TXT     "k=rsa; t=s; p=${metadata.Properties['umbrella_keys.xml'].xdata.find('DKIMpubkey').text}"
{% if ext_domain==CANONICAL_domain and CANONICAL_hostname %}\
${CANONICAL_hostname.ljust(15)} IN      A       ${ext_ip}
{% end %}\
{%   if hostname_aliases[ext_domain] is not None %}\
{%     for name in hostname_aliases[ext_domain] %}\
${name.ljust(15)} IN      A       ${ext_ip}
{%     end %}\
{%   end %}\
{%   for subdomain in metadata.Properties['umbrella.xml'].xdata.findall('domain[name="%s"]/subdomain' % (ext_domain,)) %}\
{% python
subdomain_name=subdomain.find('name').text
subdomain_FQDN=subdomain_name+"."+ext_domain
glues={}
%}\
; definitions for ${subdomain_FQDN} subdomain
$$ORIGIN ${subdomain_FQDN}.
$$TTL 86400      ; 1 day
{%     for DNS in subdomain.findall('DNS') %}\
{% python
dns_name=DNS.text
if 'ip' in DNS.attrib and dns_name.endswith('.'+subdomain_FQDN):
  glues[dns_name]=DNS.attrib['ip']
%}\
${(subdomain_FQDN+'.').ljust(23)} NS      ${dns_name}.
{%     end%}\
{%     if len(glues)>0 %}\
; glue records
{%         for glue_dns_name, glue_dns_ip in glues.iteritems() %}\
${(glue_dns_name+'.').ljust(23)} IN A ${glue_dns_ip}
{%         end%}\
{%     end %}\
{%   end %}\
{% end %}\
