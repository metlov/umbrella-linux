#!/bin/bash

# ldap parsing ifluenced by https://gist.github.com/dansimau/674203
# (c) 2018 Konstantin L. Metlov <metlov@fti.dn.ua>

# lock the script from running twice
LOCKFILE=/tmp/`basename "$0"`.lock
if ( set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
    trap 'rm -f "$LOCKFILE"; exit $?' INT TERM EXIT HUP QUIT PIPE

    source /etc/umbrella.conf
    DHCP_HEADER_FILE="/etc/dhcp/dhcpd.conf-head"

    DHCP_FILE='/etc/dhcp/dhcpd.conf'
    DHCP_FILE_TMP=${DHCP_FILE}.tmp

    echo "# Generated by umbrella-ldap2dhcp" >$DHCP_FILE_TMP
    if [ -e "$DHCP_HEADER_FILE" ]; then
        cat "$DHCP_HEADER_FILE" >>$DHCP_FILE_TMP
    fi
    echo -e "\n\n# workstations, terminals, etc from LDAP\n" >>$DHCP_FILE_TMP

    ldapsearch -x -LLL -S 'cn' -o ldif-wrap=no '(&(|(objectClass=fdTerminal)(objectClass=fdWorkstation)(objectClass=fdPrinter))(objectClass=ipHost)(macAddress=*))' cn ipHostNumber macAddress | \
    while read line; do
        # Skip LDIF comments
        [ "${line:0:1}" == "#" ] && continue;

        # Empty line means the end of the record.
        if [ "$line" == "" ]; then
            if [ -z "$RECORD_gotoMode" -o "$RECORD_gotoMode" == "active" ]; then
                echo "host $RECORD_cn.$DOMAIN_NAME {hardware ethernet $RECORD_macAddress; fixed-address $RECORD_ipHostNumber;}" >>$DHCP_FILE_TMP
            else
                echo "host $RECORD_cn.$DOMAIN_NAME {hardware ethernet $RECORD_macAddress; fixed-address $RECORD_ipHostNumber; deny booting; deny bootp;}" >>$DHCP_FILE_TMP
            fi
        fi

        attr=${line%%:*}
        value=${line#*: }

        eval RECORD_${attr}=\"$value\"
    done
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        (>&2 echo "ldapsearch error, dhcp configuration unchanged")
        exit 9
    fi

    if ! cmp "$DHCP_FILE" "$DHCP_FILE_TMP" &>/dev/null; then
        # zone file differs need to reload
        mv "$DHCP_FILE_TMP" "$DHCP_FILE"
        systemctl restart isc-dhcp-server
    else
        # zone unchanged, remove the temporary file
        rm -f "$DHCP_FILE_TMP"
    fi

    # clean up the lock fiile, and release the trap
    rm -f "$LOCKFILE"
    trap - INT TERM EXIT
else
    echo "Lock Exists: $LOCKFILE owned by $(cat $LOCKFILE)."
fi
