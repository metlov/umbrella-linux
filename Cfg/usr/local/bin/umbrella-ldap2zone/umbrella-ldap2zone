#!/bin/bash
# Umbrella Linux primary zone file maintenance.
# ldap parsing ifluenced by https://gist.github.com/dansimau/674203
# (c) 2018 Konstantin L. Metlov <metlov@fti.dn.ua>
set -e

if [ "$(whoami)" != "bind" ]; then
        echo "`basename "$0"` must be run as user: bind"
        exit 9
fi

# lock the script from running twice
LOCKFILE=/tmp/`basename "$0"`.lock
if ( set -o noclobber; echo "$$" > "$LOCKFILE") 2> /dev/null; then
    trap 'rm -f "$LOCKFILE"; exit $?' INT TERM EXIT HUP QUIT PIPE

    source /etc/umbrella.conf

    ZONE_HEADER_FILE="/etc/bind/zones/mainzone"
    REV_ZONE_HEADER_FILE="/etc/bind/zones/mainzone.rev"

    ZONE_FILE='/var/cache/bind/mainzone'
    REV_ZONE_FILE='/var/cache/bind/mainzone.rev'
    ZONE_FILE_TMP=${ZONE_FILE}.tmp
    REV_ZONE_FILE_TMP=${REV_ZONE_FILE}.tmp

    # determine the reverse zone name
    # FIXME: currently based on the assumption that the whole local network
    # of Umbrella is wholly contained within a class B network.
    IFS=. read ip1 ip2 ip3 ip4 <<< "$IP_CONFIG"
    REV_ZONE_NAME=$ip2.$ip1.in-addr.arpa

    ZONE_VIEWS="pubnet secnet DMZnet"

    echo "; Generated by umbrella-ldap2zone" >$ZONE_FILE_TMP
    if [ -e "$ZONE_HEADER_FILE" ]; then
        cat "$ZONE_HEADER_FILE" >>$ZONE_FILE_TMP
    fi
    echo -e "\n\n; workstations, terminals, etc from LDAP" >>$ZONE_FILE_TMP

    echo "; Generated by umbrella-ldap2zone" >$REV_ZONE_FILE_TMP
    if [ -e "$REV_ZONE_HEADER_FILE" ]; then
        cat "$REV_ZONE_HEADER_FILE" >>$REV_ZONE_FILE_TMP
    fi
    echo -e "\n\n; workstations, terminals, etc from LDAP" >>$REV_ZONE_FILE_TMP

    ldapsearch -x -LLL -S 'cn' -o ldif-wrap=no '(|(&(|(objectClass=gotoTerminal)(objectClass=gotoWorkstation))(gotoMode=active))(objectClass=device))' cn ipHostNumber | \
        while read line; do
            # Skip LDIF comments
            [ "${line:0:1}" == "#" ] && continue;

            # Empty line means the end of the record.
            if [ "$line" == "" ]; then
                printf "%-40.40s IN   A %s\n" "$RECORD_cn" "$RECORD_ipHostNumber" >>$ZONE_FILE_TMP
                IFS=. read ip1 ip2 ip3 ip4 <<< "$RECORD_ipHostNumber"
                printf "%-40.40s IN PTR %s.\n" "$ip4.$ip3" "$RECORD_cn.$DOMAIN_NAME" >>$REV_ZONE_FILE_TMP
            fi

            attr=${line%%:*}
            value=${line#*: }

            eval RECORD_${attr}=\"$value\"
        done
    if [ ${PIPESTATUS[0]} -ne 0 ]; then
        (>&2 echo "ldapsearch error, zone unchanged")
        exit 9
    fi

    if ! cmp "$ZONE_FILE" "$ZONE_FILE_TMP" &>/dev/null; then
        # zone file differs need to reload
        mv "$ZONE_FILE_TMP" "$ZONE_FILE"
        for zoneview in $ZONE_VIEWS; do
            rndc reload ${DOMAIN_NAME} IN $zoneview &>/dev/null
        done
    else
        # zone unchanged, remove the temporary file
        rm -f "$ZONE_FILE_TMP"
    fi

    if ! cmp "$REV_ZONE_FILE" "$REV_ZONE_FILE_TMP" &>/dev/null; then
        # reverse zone file differs need to reload
        mv "$REV_ZONE_FILE_TMP" "$REV_ZONE_FILE"
        for zoneview in $ZONE_VIEWS; do
            rndc reload ${REV_ZONE_NAME} IN $zoneview | \
                grep -v 'zone reload queued' | \
                grep -v 'zone reload successful'
        done
    else
        # reverse zone unchanged, remove the temporary file
        rm -f "$REV_ZONE_FILE_TMP"
    fi

# clean up the lock fiile, and release the trap
    rm -f "$LOCKFILE"
    trap - INT TERM EXIT
else
    echo "Lock Exists: $LOCKFILE owned by $(cat $LOCKFILE)."
fi
