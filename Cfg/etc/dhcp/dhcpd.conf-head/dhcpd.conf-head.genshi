{% python
from genshi.template import TemplateError
exec(open(repo+'/Python/00_baseparams.py').read())
exec(open(repo+'/Python/10_funchosts.py').read())
exec(open(repo+'/Python/20_networks.py').read())
exec(open(repo+'/Python/30_networking.py').read())
%}\
default-lease-time 21600;
max-lease-time 21600;
log-facility local0;
authoritative;
ddns-update-style none;
{% if 'ltsp' in funcifs %}\
{%     if 'ubuntu-bionic' in metadata.groups %}\
filename "/pxelinux.0";
{%     end %}\
{%     if 'ubuntu-bionic' not in metadata.groups %}\
option arch code 93 = unsigned integer 16;
if option arch = 00:07 {
    filename "boot/bootx64.efi";
} else {
    filename "boot/pxelinux.0";
}
{%     end %}\
next-server ${funcifs['ltsp']};
{% end %}\
use-host-decl-names on;
allow booting;
allow bootp;

# Public network
subnet ${networks['pubif'].network_address} netmask ${str(networks['pubif'].netmask)} {
    option routers ${routerifs['pubif']};
    option domain-name "${domain_name}";
    option subnet-mask ${str(networks['pubif'].netmask)};
    option broadcast-address ${networks['pubif'].broadcast_address};
    option domain-name-servers ${routerifs['pubif']};
{% if pub_dhcp is not None %}\
    range ${pub_dhcp[0]} ${pub_dhcp[1]};
{% end %}\
}

# Secure network
subnet ${networks['secif'].network_address} netmask ${str(networks['secif'].netmask)} {
    option routers ${routerifs['secif']};
    option domain-name "${domain_name}";
    option subnet-mask ${str(networks['secif'].netmask)};
    option broadcast-address ${networks['secif'].broadcast_address};
    option domain-name-servers ${routerifs['secif']};
}

# DMZ
subnet ${networks['DMZif'].network_address} netmask ${str(networks['DMZif'].netmask)} {
    option routers ${routerifs['DMZif']};
    option domain-name "${domain_name}";
    option subnet-mask ${str(networks['DMZif'].netmask)};
    option broadcast-address ${networks['DMZif'].broadcast_address};
    option domain-name-servers ${routerifs['DMZif']};
}

{% for host in sorted(funchosts) %}\
host ${funchosts[host]} {hardware ethernet ${funcmacs[host]};fixed-address ${funcifs[host]};}
{% end %}\
