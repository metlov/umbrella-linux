{% python
import socket
from genshi.template import TemplateError
execfile(repo+'/Python/00_baseparams.py')
execfile(repo+'/Python/10_funchosts.py')
execfile(repo+'/Python/20_networks.py')
execfile(repo+'/Python/30_networking.py')
if (entry is not None) and (entry.find('function').text == 'router'):
  # router requires special treatment (it has several interfaces)
  gateway=metadata.Properties['umbrella.xml'].xdata.find('gateway')
  if gateway is not None:
    gateway=ipcalc.IP(gateway.text)
  type='router'
else:
  netdev='eth0'
  # either a workstation or a single-interface server
  if entry is not None:
    # single-interface server (we take the IP addr from umbrella.xml)
    # check that indeed a single interface is declared
    if not len(ifs) ==1:
      raise TemplateError('Too many interfaces are declared in umbrella.xml for '+metadata.hostname+' .')
    interface, addr = ifs.popitem()
    interface, netdev = ifdevs.popitem()
    # determine the subnet
    subnet=networks[interface]
    if subnet is None:
      raise TemplateError('No defined subnet for '+str(interface))
    # check if the address indeed belongs to the subnet
    if not addr in subnet:
      raise TemplateError('The address for '+metadata.hostname+' ('+str(addr)+')is not in subnet '+str(subnet)+' .')
  else:
    if organization_host:
      # a workstation in a subnet, defined in the organization.xml file
      interface=None
      subnet = ipcalc.Network(ws_org_network)
    else:
      # a workstation in one of the standard subnets (pub, sec, etc)
      # find the subnet
      subnet=None
      for iface, net in networks.iteritems():
        if addr in net:
          subnet=net
          interface=iface
      if subnet is None:
        raise TemplateError('The address '+addr+' for '+metadata.hostname+' belongs to unknown subnet.')
  if interface is not None and not interface in routerifs:
    raise TemplateError('No route is defined for the subnet '+str(subnet)+' .')
  type='singleif'
  # vmhost has single interface declared but in fact has several interfaces
  if (entry is not None) and (entry.find('function').text == 'vmhost'):
    type='vmhost'
%}\
{% if type == 'singleif' %}\
auto lo
iface lo inet loopback

auto ${netdev}
iface ${netdev} inet static
    address ${addr}
    netmask ${subnet.netmask()}
    network ${subnet.network()}
{% if organization_host %}\
    gateway ${ws_org_gateway}
    dns-nameservers ${routerifs['pubif']}
{% end %}\
{% if not organization_host %}\
    gateway ${routerifs[interface]}
{% end %}\
{% if not organization_host and interface != 'DMZif' %}\
    dns-nameservers ${routerifs[interface]}
{% end %}\
{% if not organization_host and interface == 'DMZif' %}\
{%     if 'DMZsmtp' in funchosts %}\
{% python
# find DMZ interface of DMZsmtp
dmzip=None
for server in metadata.Properties['umbrella.xml'].xdata.findall('server'):
  if server.find('function').text=='DMZsmtp':
    interface = server.find('DMZif')
    t = interface.find('ip')
    if (t is not None) and t.text.strip():
      dmzip=ipcalc.IP(t.text.strip())
%}\
{%         if dmzip is not None %}\
    dns-nameservers ${dmzip}
{%         end %}\
{%     end %}\
{%     if not 'DMZsmtp' in funchosts %}\
{% python
DNScache=metadata.Properties['umbrella.xml'].xdata.find('DNScache')
if DNScache is not None:
  DNScache=DNScache.text
%}\
    dns-nameservers ${DNScache}
{%     end %}\
{% end %}\
    dns-search ${domain_name}
{%     if 'vm' in metadata.groups %}\
    post-up /sbin/ifconfig ${netdev} txqueuelen 4
{%     end %}\
{% end %}\
{% if (type == 'router') or (type == 'vmhost') %}\
auto lo
iface lo inet loopback

{%   for interface in iftypes %}\
{%     if entry.find(interface) is not None %}\
${interface_stanza( entry.find(interface), networks, domain_name )}
{%     end %}\
{%   end %}\
{% end %}\
