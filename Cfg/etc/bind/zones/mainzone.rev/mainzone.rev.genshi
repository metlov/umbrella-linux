{% python
# This template can be instantiated using altsrc under the names in the form
# <net>_mainzone.rev or link_<num>_mainzone.rev, where <net> is the network
# name and num is the number of the classful "link" zone file.

from genshi.template import TemplateError
import os
import datetime
exec(open(repo+'/Python/00_baseparams.py').read())
exec(open(repo+'/Python/10_funchosts.py').read())
exec(open(repo+'/Python/20_networks.py').read())
exec(open(repo+'/Python/21_revzones.py').read())
exec(open(repo+'/Python/30_networking.py').read())
exec(open(repo+'/Python/32_zone_timestamp.py').read())

# compatibility code for ipaddress version < 3.7.
# TODO: remove, once ubuntu-bionic support is removed
if hasattr(ipaddress.IPv4Network,"subnet_of"):
    is_subnet_of = lambda a, b: a.subnet_of(b)
else:
    is_subnet_of = lambda a, b: (b.network_address <= a.network_address and
                                 b.broadcast_address >= a.broadcast_address)

zonefilename=name.split('/')[-1]

filenametail='_mainzone.rev'
if not zonefilename.endswith(filenametail):
  raise TemplateError('Reverse zone file name "'+zonefilename+'" must end with "'+filenametail+'".')


params=zonefilename[:-len(filenametail)]
if params.startswith('link_'):
  # linking zone
  numclassful=int(params[len(params.rstrip('0123456789')):])
  if numclassful<0 or numclassful>=len(linkingclassfulnets):
    raise TemplateError('Classful zone number "'+str(numclassful)+'" out of range [0,'+str(len(linkingclassfulnets)-1)+'].')
  NET=linkingclassfulnets[numclassful]
else:
  # served by router on the IP, corresponding to the specified subnet
  ifname=params+'if'
  if ifname not in networks:
    raise TemplateError('Requested to generate internal zone for an unknown subnet "'+params+'".')
  NET=networks[ifname]
NETC=findClassful(NET,classfulnets)
zonename=networkZoneName(NET,NETC,classlessShortName)

c1width=35
%}\
;-------------------------------------------------------------------------
;
; Umbrella Linux
;
;                (c) 2015-2020 by Konstantin L. Metlov <metlov@fti.dn.ua>
;                                 and other listed contributors
;
;
{% if params.startswith('link_') %}\
; This is the linking file for "${str(NET)}" network reverse zone file.

{% end if params.startswith('link_') %}\
{% if not params.startswith('link_') %}\
; This is the header file for "${params}" network reverse zone file.
; It gets supplemented (every 5 minutes) by a live list of hosts from
; LDAP with a help of a cron job, running the umbrella-ldap2zone script.
; The resulting completed zone file is then (re)loaded into the local bind.

{% end if not params.startswith('link_') %}\
$$ORIGIN ${zonename}.
$$TTL 500
@  500  IN  SOA ${funchosts['router']}. itadmins.${domain_name}. (
                                          ${timestamp} ; serial
                                          2400       ; refresh
                                          1800       ; retry
                                          720000     ; expire
                                          6400       ; minimum TTL
                                          )
${"".ljust(c1width)}    NS ${funchosts['router']}.
{% if params.startswith('link_') %}\
{%   for N in sorted(networks.values(),key=lambda x: x.with_prefixlen) %}\
{%     if is_subnet_of(N,NET) and N != NET %}\
${classlessShortName(N,NET).ljust(c1width)}    NS ${funchosts['router']}.
{%       for IP in list(N)[1:-1] %}\
${hostRevIP(IP,NETC).ljust(c1width)}    CNAME ${hostRevIP(IP,N)}.${classlessShortName(N,NET)}
{%       end %}\
{%     end %}\
{%   end %}\
{% end if params.startswith('link_') %}\
{% if not params.startswith('link_') %}\
{%   for host in sorted(funchosts) %}\
{%     if funcifs[host] in NET %}\
${hostRevIP(funcifs[host],NET).ljust(c1width)}    IN PTR ${funchosts[host]}.
{%     end %}\
{%   end %}\
{% end if not params.startswith('link_') %}\
