{% python
# This template can be instantiated using altsrc under the names in the form
# [<net>_]zone<num> where <net> is the network name and num is the external
# domain name. The <net>_ part is optional. For example, instantiating it
# under /etc/bind/zones/pub_zone0 will produce zone file for the 0th
# domain served to a pub subnet.

from genshi.template import TemplateError
import os
import datetime
execfile(repo+'/Python/00_baseparams.py')
execfile(repo+'/Python/10_funchosts.py')
execfile(repo+'/Python/20_networks.py')
execfile(repo+'/Python/30_networking.py')
execfile(repo+'/Python/32_zone_timestamp.py')

ext_domain_index=int(name[len(name.rstrip('0123456789')):])
ext_domain=domain_names_list[ext_domain_index]

zonefilename=name.split('/')[-1]
if len(zonefilename)>4 and zonefilename[3]=='_':
  internal_domain=True
  # served by router on the IP, corresponding to the specified subnet
  ifname=zonefilename[0:3]+'if'
  if ifname not in routerifs:
    raise TemplateError('Requested to generate internal zone for an unknown subnet "'+zonefilename[0:3]+'".')
  ip_address=routerifs[ifname]
else:
  internal_domain=False
  # served on the external IP
  if int_address is not None and int_address.strip():
    ip_address=int_address
  if ext_address is not None and ext_address.strip():
    ip_address=ext_address

# for internal rendering of a domain we ignore rev DNS and make the
# router to be its master server
if internal_domain:
  CANONICAL_hostname=funchostsshort['router']
  CANONICAL_domain=ext_domain
  CANONICAL_FQHN = '%s.%s' % (CANONICAL_hostname, CANONICAL_domain)
%}\
; the external (Internet or inter-corporate net) zone view for
; ${ext_domain} ( note that mail is still handled by the primary
; smtp server at ${CANONICAL_FQHN} )
$$ORIGIN ${ext_domain}.
$$TTL 86400      ; 1 day
${ext_domain}.      IN SOA  ${CANONICAL_FQHN}. itadmins.${domain_name}. (
                                ${timestamp} ; serial
                                28800      ; refresh (8 hours)
                                3600       ; retry (1 hour)
                                1814400    ; expire (3 weeks)
                                86400      ; minimum (1 day)
                                )
                        NS      ${CANONICAL_FQHN}.
{% if not internal_domain %}\
{%   for secondaryDNS in secondaryNameservers[ext_domain] %}\
                        NS      ${secondaryDNS}.
{%   end %}\
{% end %}\
                        A       ${ip_address}
{% if not internal_domain %}\
                        MX      5 ${CANONICAL_FQHN}.
{% end %}\
{% if internal_domain and 'mail' in funchosts %}\
                        MX      5 ${funchosts['mail']}.
{% end %}\
                IN      TXT     "v=spf1 a mx ~all"
mail._domainkey IN      TXT     "k=rsa; t=s; p=${metadata.Properties['umbrella_keys.xml'].xdata.find('DKIMpubkey').text}"
{% if ext_domain==CANONICAL_domain and CANONICAL_hostname %}\
${CANONICAL_hostname.ljust(15)} IN      A       ${ip_address}
{% end %}\
{% if 'DMZwww' in funchosts %}\
{%   if internal_domain %}\
${funchostsshort['DMZwww'].ljust(15)} IN      CNAME   ${funchosts['DMZwww']}.
{%   end %}\
{%   if not internal_domain %}\
${funchostsshort['DMZwww'].ljust(15)} IN      A       ${ip_address}
{%   end %}\
{% end %}\
{% if 'DMZvpn' in funchosts %}\
{%   if internal_domain %}\
${funchostsshort['DMZvpn'].ljust(15)} IN      CNAME   ${funchosts['DMZvpn']}.
{%   end %}\
{%   if not internal_domain %}\
${funchostsshort['DMZvpn'].ljust(15)} IN      A       ${ip_address}
{%   end %}\
{% end %}\
{% if hostname_aliases[ext_domain] is not None %}\
{%   for name in hostname_aliases[ext_domain] %}\
${name.ljust(15)} IN      A       ${ip_address}
{%   end for each alias %}\
{% end if have aliases %}\
{% if ext_domain==domain_name and 'DMZxmpp' in funchosts %}\
${funchostsshort['DMZxmpp'].ljust(15)} IN      A       ${ip_address}
_xmpp-server._tcp    IN  SRV 5 0 5269 ${funchostsshort['DMZxmpp']}.${ext_domain}.
{% end main domain and Jabber is in DMZ %}\
{% for subdomain in metadata.Properties['umbrella.xml'].xdata.findall('domain[name="%s"]/subdomain' % (ext_domain,)) %}\
{% python
subdomain_name=subdomain.find('name').text
subdomain_FQDN=subdomain_name+"."+ext_domain
glues={}
%}\
; definitions for ${subdomain_FQDN} subdomain
$$ORIGIN ${subdomain_FQDN}.
$$TTL 86400      ; 1 day
{%   for DNS in subdomain.findall('DNS') %}\
{% python
dns_name=DNS.text
if 'ip' in DNS.attrib and dns_name.endswith('.'+subdomain_FQDN):
  glues[dns_name]=DNS.attrib['ip']
%}\
${(subdomain_FQDN+'.').ljust(23)} NS      ${dns_name}.
{%   end for DNS server %}\
{%   if len(glues)>0 %}\
; glue records
{%     for glue_dns_name, glue_dns_ip in glues.iteritems() %}\
${(glue_dns_name+'.').ljust(23)} IN A ${glue_dns_ip}
{%     end for glues %}\
{%   end if there are glues%}\
{% end for subdomain %}\
