{% python
# This template can be instantiated using altsrc under the names in the form
# [<net>_]zone<num> where <net> is the network name and num is the external
# domain name. The <net>_ part is optional. For example, instantiating it
# under /etc/bind/zones/pub_zone0 will produce zone file for the 0th
# domain served to a pub subnet.

from genshi.template import TemplateError
import os
import datetime
execfile(repo+'/Python/00_baseparams.py')
execfile(repo+'/Python/10_funchosts.py')
execfile(repo+'/Python/20_networks.py')
execfile(repo+'/Python/25_firewall.py')
execfile(repo+'/Python/30_networking.py')
execfile(repo+'/Python/32_zone_timestamp.py')

ip_address=routerifs['pubif']
ext_domain=domain_name
c1width=35
%}\
;-------------------------------------------------------------------------
;
; Umbrella Linux
;
;                (c) 2015-2018 by Konstantin L. Metlov <metlov@fti.dn.ua>
;                                 and other listed contributors
;
;
; This is the header file for the primary domain's zone file of this 
; Umbrella Linux installation. It gets supplemented (every 5 minutes)
; by a live list of workstations from LDAP with a help of a cron job,
; running the umbrella-ldap2zone script. The resulting completed zone
; file is then (re)loaded into the local bind.

$$ORIGIN ${ext_domain}.
$$TTL 500
@  500  IN  SOA ${funchosts['router']}. itadmins.${ext_domain}. (
                                          ${timestamp} ; serial
                                          2400       ; refresh
                                          1800       ; retry
                                          720000     ; expire
                                          6400       ; minimum TTL
                                          )
${"".ljust(c1width)}    NS    ${funchostsshort['router']}
${"".ljust(c1width)}    A     ${ip_address}
{% if 'mail' in funchosts %}\
${"".ljust(c1width)}    MX    5 ${funchostsshort['mail']}
${"".ljust(c1width)} IN TXT   "v=spf1 a mx ~all"
${"mail._domainkey".ljust(c1width)} IN TXT   "k=rsa; t=s; p=${metadata.Properties['umbrella_keys.xml'].xdata.find('DKIMpubkey').text}"
{% end %}\

; servers
{% for host in funchosts %}\
${funchostsshort[host].ljust(c1width)} IN A     ${funcifs[host]}
{% if host=='router' %}\
${"ns1".ljust(c1width)} IN CNAME ${funchostsshort[host]}
{% end %}\
{% if host=='config' %}\
${"autoconfig".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"packages".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"gosa".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"dir".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"wpad".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"kdc1".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"ldap1".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"_kerberos".ljust(c1width)} IN TXT   "${realm_name}"
${"_wpad._tcp".ljust(c1width)} IN SRV   0 0 80 ${funchostsshort[host]}
${"_kerberos._udp".ljust(c1width)} IN SRV   0 0 88 ${funchostsshort[host]}
${"_kerberos-master._udp".ljust(c1width)} IN SRV   0 0 88 ${funchostsshort[host]}
${"_kerberos-adm._tcp".ljust(c1width)} IN SRV   0 0 749 ${funchostsshort[host]}
${"_kpasswd._udp".ljust(c1width)} IN SRV   0 0 464 ${funchostsshort[host]}
{% end %}\
{% if host=='ltsp' and forward_ssh_to_ltsp %}\
${"gate".ljust(c1width)} IN CNAME ${funchostsshort[host]}
{% end %}\
{% if host=='proxy' %}\
${"kdc2".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"ldap2".ljust(c1width)} IN CNAME ${funchostsshort[host]}
${"_kerberos._udp".ljust(c1width)} IN SRV   0 0 88 ${funchostsshort[host]}
{% end %}\
{% if (host=='proxy' and 'DMZxmpp' not in funchosts) or (host=='DMZxmpp') %}\
${"_xmpp-client._tcp".ljust(c1width)} IN SRV   5 0 5222 ${funchostsshort[host]}
{% end %}\
{% if host=='DMZxmpp' %}\
${"_jabber._tcp".ljust(c1width)} IN SRV   5 0 5269 ${funchostsshort[host]}
${"_xmpp-server._tcp".ljust(c1width)} IN SRV   5 0 5269 ${funchostsshort[host]}
{% end %}\
{% end for host in funchosts %}\
{% for subdomain in metadata.Properties['umbrella.xml'].xdata.findall('domain[name="%s"]/subdomain' % (ext_domain,)) %}\
{% python
subdomain_name=subdomain.find('name').text
subdomain_FQDN=subdomain_name+"."+ext_domain
glues={}
%}\
; definitions for ${subdomain_FQDN} subdomain
{%   for DNS in subdomain.findall('DNS') %}\
{% python
dns_name=DNS.text
if 'ip' in DNS.attrib and dns_name.endswith('.'+subdomain_FQDN):
  glues[dns_name]=DNS.attrib['ip']
%}\
${(subdomain_FQDN+'.').ljust(c1width)}    NS    ${dns_name}.
{%   end for DNS server %}\
{%   if len(glues)>0 %}\
; glue records
{%     for glue_dns_name, glue_dns_ip in glues.iteritems() %}\
${(glue_dns_name+'.').ljust(c1width)} IN A     ${glue_dns_ip}
{%     end for glues %}\
{%   end if there are glues%}\
{% end for subdomain %}\
