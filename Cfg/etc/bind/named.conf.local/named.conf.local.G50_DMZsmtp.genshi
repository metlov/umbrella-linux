{% python
execfile(repo+'/Python/00_baseparams.py')
execfile(repo+'/Python/10_funchosts.py')
execfile(repo+'/Python/20_networks.py')
execfile(repo+'/Python/30_networking.py')
# determine the acl's for zone views
extacl=None
intacl=None
for server in metadata.Properties['umbrella.xml'].xdata.findall('server'):
  if server.find('function').text == 'router':
    t = server.find('extif')
    if t is not None:
      t = t.find('zone')
      if t is not None:
        extacl = t.find('acl')
    t = server.find('intif')
    if t is not None:
      t = t.find('zone')
      if t is not None:
        intacl = t.find('acl')
%}\
acl DMZ { ${str(networks['DMZif'].network())+"/"+str(networks['DMZif'].mask)}; 127.0.0.1/8;};
{% if extacl is not None %}\
acl EXT { ${extacl.text} };  // acl for the external, internet-facing interface
{% end %}\
{% if intacl is not None %}\
acl INT { ${intacl.text} };  // acl for the intranet interface
{% end %}\

view "DMZ-view" {
    match-clients { DMZ; };
    recursion yes;
    // include top level zones
    include "/etc/bind/named.conf.default-zones";
};

{% if int_address is not None and int_address.strip() %}\
view "INT-view" {
    match-clients { INT; };
    recursion no;
    // include top level zones
    include "/etc/bind/named.conf.default-zones";
    // be the master of the intranet version of local zones
{%   for i in range(len(domain_names_list)) %}\
    zone "${domain_names_list[i]}" {
        type master;
        file "/etc/bind/mydomain${"%02d" % (i,)}-int";
        allow-update { none; };
        notify yes;
    };
{% end %}\
};
{% end %}\
{% if ext_address is not None and ext_address.strip() %}\

view "EXT-view" {
    match-clients { any; };
    recursion no;
    // include top level zones
    include "/etc/bind/named.conf.default-zones";
    // be the master of the intranet version of local zones
{%   for i in range(len(domain_names_list)) %}\
    zone "${domain_names_list[i]}" {
        type master;
        file "/etc/bind/mydomain${"%02d" % (i,)}-ext";
        allow-update { none; };
        notify yes;
    };
{% end %}\
};
{% end %}\
