{% python
import socket
from genshi.template import TemplateError
execfile(repo+'/Python/00_baseparams.py')
execfile(repo+'/Python/10_funchosts.py')
execfile(repo+'/Python/20_networks.py')
execfile(repo+'/Python/30_networking.py')
execfile(repo+'/Python/35_organization.py')
%}\
{% if 'DMZsmtp' in metadata.groups %}\
acl DMZ { ${str(networks['DMZif'].network())+"/"+str(networks['DMZif'].mask)}; 127.0.0.1/8;};

{% end %}\
options {
        directory "/var/cache/bind";
{% if 'DMZsmtp' not in metadata.groups and 'DMZsmtp' in funchosts %}\
        forwarders { ${funcifs['DMZsmtp']}; };
{% end %}\
{% if 'DMZsmtp' in metadata.groups or 'DMZsmtp' not in funchosts %}\
{%   if DNScache is not None %}\
        forwarders { ${'; '.join(DNScache)}; };
{%   end %}\
{% end %}\
{% if not 'DMZsmtp' in metadata.groups %}\
{% python
# external interface is not served by DNS
ifs.pop('extif', None)
networks.pop('extif', None)
strifaces=''
for interface in ifs.values():
  strifaces += str(interface) + '; '
strnets=set()
for network in networks.values():
  strnets.add(str(network.network()) + '/' + str(network.mask))
for net in netclasses.iterkeys():
  strnets.add(net)
strnets='; '.join(strnets)
%}\
        listen-on { ${strifaces}127.0.0.1;};
        allow-recursion { ${strnets}; 127.0.0.0/24;};
        attach-cache "common-cache";
{% end %}\
{% if 'DMZsmtp' in metadata.groups %}\
        allow-query { any; };
        allow-recursion { DMZ; };
        allow-query-cache { DMZ; };
{% end %}\
        auth-nxdomain no;    # conform to RFC1035
        listen-on-v6 { none; };
};

server 0.0.0.0/0 {
        edns no;
};
