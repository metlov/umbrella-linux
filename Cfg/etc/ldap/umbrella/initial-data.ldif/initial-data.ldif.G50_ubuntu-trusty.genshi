{% python
import socket
import base64
from passlib.hash import ldap_salted_sha1 as lsm
import random
import string
from genshi.template import TemplateError
execfile(repo+'/Python/00_baseparams.py')
execfile(repo+'/Python/10_funchosts.py')
execfile(repo+'/Python/20_networks.py')
execfile(repo+'/Python/30_networking.py')
description=long_name
if dept_name is not None:
  description=dept_name
splitnet=str(wholenet).split('.')
zonename=str(splitnet[1])+'.'+str(splitnet[0])+'.in-addr.arpa.'
gosa_admin_cn="System Administrator-admin"
gosa_admin="cn="+gosa_admin_cn+",ou=People,"+ldap_root
# generate salt
random.seed(metadata.hostname+metadata.Properties['umbrella_keys.xml'].xdata.find('DKIMseckey').text)
saltstr=''.join(random.choice(string.ascii_letters+string.digits) for x in range(16))
gosa_admin_pwd_hash=lsm.encrypt(metadata.Properties['umbrella_keys.xml'].xdata.find('GOSA_admin_pass').text, salt=saltstr)
ldap_syncrepl_pwd_hash=lsm.encrypt(metadata.Properties['umbrella_keys.xml'].xdata.find('LDAP_syncrepl_pass').text, salt=saltstr)
ldap_admin_pwd_hash=lsm.encrypt(metadata.Properties['umbrella_keys.xml'].xdata.find('LDAP_pass').text, salt=saltstr)

# check if we have router
have_router='router' in funchosts

# collect ip addresses and macs of servers
srvips={}
srvlasttwo={}
srvmacs={}
for server in metadata.Properties['umbrella.xml'].xdata.findall('server'):
  srvname=server.find('name').text
  srvfunc=server.find('function').text
  if srvfunc == 'router' or srvfunc == 'vmhost':
    iface = server.find('pubif')
  else:
    iface=None
    for interface in iftypes:
      t=server.find(interface)
      if t is not None:
        if iface is None:
          iface=t
        else:
          raise TemplateError('Multiple interfaces are defined for '+srvfunc+' in umbrella.xml.')
  if iface is None:
    raise TemplateError('No interfaces are defined for '+srvfunc+' in umbrella.xml.')
  # now iface is the only interface of the server
  t = iface.find('ip')
  if t is None:
    raise TemplateError('IP address must be defined for '+iface.tag+' on '+srvfunc+' in umbrella.xml.')
  srvips[srvfunc]=t.text
  splitip=str(t.text).split('.')
  srvlasttwo[srvfunc]=str(splitip[3])+'.'+str(splitip[2])
  srvmacs[srvfunc]=iface.find('mac').text
%}\
# ${domain_name}
dn: ${ldap_root}
o: ${domain_name}
dc: ${system_name}
ou: ${system_name}
gosaAclEntry: 0:psub:${base64.b64encode(gosa_admin)}:all/all;cmdrw
gosaAclEntry: 1:psub:${base64.b64encode('cn=itadmins,ou=Group,'+ldap_root)}:all/all;cmdrw,all/core;cmdrw
description: ${description}
objectClass: gosaAcl
objectClass: top
objectClass: dcObject
objectClass: organization
objectClass: gosaDepartment

# admin, ${domain_name}
dn: cn=admin,${ldap_root}
objectClass: simpleSecurityObject
objectClass: organizationalRole
cn: admin
userPassword: ${ldap_admin_pwd_hash}
description: LDAP root user

# syncrepl, ${domain_name}
dn: cn=syncrepl,${ldap_root}
objectClass: simpleSecurityObject
objectClass: organizationalRole
cn: syncrepl
userPassword: ${ldap_syncrepl_pwd_hash}
description: LDAP replication user

# People, ${domain_name}
dn: ou=People,${ldap_root}
objectClass: organizationalUnit
ou: People

# ${gosa_admin_cn}, People, ${domain_name}
dn: ${gosa_admin}
objectClass: top
objectClass: person
objectClass: gosaAccount
objectClass: organizationalPerson
objectClass: inetOrgPerson
givenName: System
sn: Administrator
cn: ${gosa_admin_cn}
userPassword: ${gosa_admin_pwd_hash}
uid: admin

# GOsaLdapEncoding_\2C_\22_(_)_\2B_/, ${domain_name}
dn: o=GOsaLdapEncoding_\2C_\22_(_)_\2B_/,${ldap_root}
objectClass: top
objectClass: organization
o: GOsaLdapEncoding_,_"_(_)_+_/
description: GOsa character encoding test-object.

# systems, ${domain_name}
dn: ou=systems,${ldap_root}
objectClass: organizationalUnit
ou: systems

# configs, systems, ${domain_name}
dn: ou=configs,ou=systems,${ldap_root}
objectClass: organizationalUnit
ou: configs

# gosa, configs, systems, ${domain_name}
dn: ou=gosa,ou=configs,ou=systems,${ldap_root}
objectClass: organizationalUnit
ou: gosa

# Group, ${domain_name}
dn: ou=Group,${ldap_root}
objectClass: organizationalUnit
ou: Group

# core, gosa, configs, systems, ${domain_name}
dn: cn=core,ou=gosa,ou=configs,ou=systems,${ldap_root}
cn: core
objectClass: top
objectClass: gosaConfig
gosaSetting: gidNumberBase:1100
gosaSetting: SASLRealm:${realm_name}
gosaSetting: groupRDN:ou=Group
gosaSetting: passwordDefaultHash:sasl
gosaSetting: uidNumberBase:1100
gosaSetting: userRDN:ou=People
gosaSetting: sambaHashHook:
gosaSetting: rfc2307bis:true

# guests, Group, ${domain_name}
dn: cn=guests,ou=Group,${ldap_root}
cn: guests
description: guests
gidNumber: 1102
member: cn=guests,ou=Group,${ldap_root}
objectClass: top
objectClass: posixGroup
objectClass: groupOfNames

# nagios-admins, Group, ${domain_name}
dn: cn=nagios-admins,ou=Group,${ldap_root}
cn: nagios-admins
description: nagios admins
gidNumber: 1103
member: cn=nagios-admins,ou=Group,${ldap_root}
objectClass: top
objectClass: posixGroup
objectClass: groupOfNames

# itadmins, Group, ${domain_name}
dn: cn=itadmins,ou=Group,${ldap_root}
cn: itadmins
description: IT admins
gidNumber: 1100
member: cn=itadmins,ou=Group,${ldap_root}
objectClass: top
objectClass: posixGroup
objectClass: groupOfNames
{% for admin in admins %}\
memberUid: ${admin}
{% end %}\
{% for admin in admins %}\
member: cn=${admin},ou=People,${ldap_root}
{% end %}\

{% python
uid=1100
%}\
{% for admin in admins %}\
dn: cn=${admin},ou=People,${ldap_root}
uid: ${admin}
preferredLanguage: en_US
homeDirectory: /nfs/${system_name}/${admin}
loginShell: /bin/bash
uidNumber: ${uid}
gidNumber: 1100
objectClass: top
objectClass: person
objectClass: organizationalPerson
objectClass: inetOrgPerson
objectClass: gosaAccount
objectClass: posixAccount
objectClass: shadowAccount
sn: ${admin}
givenName: Nick:
cn: ${admin}
gecos: ${admin}
userPassword:: ${base64.b64encode('{SASL}'+admin+'@'+realm_name)}
{% python
uid+=1
%}\

{% end %}\
# crew, Group, ${domain_name}
dn: cn=crew,ou=Group,${ldap_root}
cn: crew
description: crew
gidNumber: 1101
member: cn=crew,ou=Group,${ldap_root}
objectClass: top
objectClass: posixGroup
objectClass: groupOfNames

# sudoers, ${domain_name}
dn: ou=sudoers,${ldap_root}
objectClass: organizationalUnit
ou: sudoers

# root, sudoers, ${domain_name}
dn: cn=root,ou=sudoers,${ldap_root}
cn: root
description: root user
sudoUser: root
sudoHost: ALL
sudoRunAs: ALL
objectClass: top
objectClass: sudoRole
sudoCommand: ALL

# itadmins, sudoers, ${domain_name}
dn: cn=itadmins,ou=sudoers,${ldap_root}
cn: itadmins
description: IT administrators
sudoUser: %itadmins
sudoHost: ALL
sudoRunAs: ALL
objectClass: top
objectClass: sudoRole
sudoCommand: ALL

# netdevices, systems, ${domain_name}
dn: ou=netdevices,ou=systems,${ldap_root}
objectClass: organizationalUnit
ou: netdevices

# ${description}, ${domain_name}
dn: o=${description},${ldap_root}
o: ${description}
ou: ${description}
description: ${description}
businessCategory: Government
objectClass: organization
objectClass: top
objectClass: gosaDepartment

# servers, systems, ${domain_name}
dn: ou=servers,ou=systems,${ldap_root}
objectClass: organizationalUnit
ou: servers

{% if have_router %}\
# ${funchosts['router']}, servers, systems, ${domain_name}
dn: cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
description: main router
gotoMode: active
ipHostNumber: ${routerifs['pubif']}
macAddress: ${routerifmacs['pubif']}
objectClass: top
objectClass: GOhard
objectClass: goServer
objectClass: dhcpServer
cn: ${funchosts['router']}
dhcpServiceDN: cn=dhcp,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}

# dhcp, ${funchosts['router']}, servers, systems, ${domain_name}
dn: cn=dhcp,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
dhcpStatements: default-lease-time 21600
dhcpStatements: max-lease-time 21600
dhcpStatements:: YXV0aG9yaXRhdGl2ZSA=
dhcpStatements: ddns-update-style none
{% if 'ltsp' in srvips %}\
dhcpStatements: filename "/ltsp/i386/pxelinux.0"
dhcpStatements: next-server ${srvips['ltsp']}
{% end %}\
dhcpStatements: use-host-decl-names on
dhcpStatements: allow booting
dhcpStatements: allow bootp
cn: dhcp
objectClass: top
objectClass: dhcpService
dhcpPrimaryDN: cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}

# Public network
# ${networks['pubif'].network()}, dhcp, ${funchosts['router']}, servers, systems, ${domain_name}
dn: cn=${networks['pubif'].network()},cn=dhcp,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
dhcpOption: routers ${routerifs['pubif']}
dhcpOption: domain-name "${domain_name}"
dhcpOption: subnet-mask ${networks['pubif'].netmask()}
dhcpOption: broadcast-address ${networks['pubif'].broadcast()}
dhcpOption: domain-name-servers ${routerifs['pubif']}
cn: ${networks['pubif'].network()}
objectClass: top
objectClass: dhcpSubnet
objectClass: dhcpOptions
dhcpNetMask: ${networks['pubif'].mask}
{% if pub_dhcp is not None %}\
dhcpRange: ${pub_dhcp[0]} ${pub_dhcp[1]}
{% end %}\

# Secure network
# ${networks['secif'].network()}, dhcp, ${funchosts['router']}, servers, systems, ${domain_name}
dn: cn=${networks['secif'].network()},cn=dhcp,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
dhcpOption: routers ${routerifs['secif']}
dhcpOption: domain-name "${domain_name}"
dhcpOption: subnet-mask ${networks['secif'].netmask()}
dhcpOption: broadcast-address ${networks['secif'].broadcast()}
dhcpOption: domain-name-servers ${routerifs['secif']}
cn: ${networks['secif'].network()}
objectClass: top
objectClass: dhcpSubnet
objectClass: dhcpOptions
dhcpNetMask: ${networks['secif'].mask}

# DMZ
# ${networks['DMZif'].network()}, dhcp, ${funchosts['router']}, servers, systems, ${domain_name}
dn: cn=${networks['DMZif'].network()},cn=dhcp,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
dhcpOption: routers ${routerifs['DMZif']}
dhcpOption: domain-name "${domain_name}"
dhcpOption: subnet-mask ${networks['DMZif'].netmask()}
dhcpOption: broadcast-address ${networks['DMZif'].broadcast()}
dhcpOption: domain-name-servers ${routerifs['DMZif']}
cn: ${networks['DMZif'].network()}
objectClass: top
objectClass: dhcpSubnet
objectClass: dhcpOptions
dhcpNetMask: ${networks['DMZif'].mask}

# ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
zoneName: ${domain_name}.
relativeDomainName: @
dNSClass: IN
nSRecord: ${funchosts['router']}.
aRecord: ${routerifs['pubif']}
mXRecord: 10 ${funchosts['mail']}.
sOARecord: ${funchosts['router']}. itadmin.${domain_name}. 2015112701 3600 1800 720000 6400

# ${zonename}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: zoneName=${zonename},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
zoneName: ${zonename}
relativeDomainName: @
dNSClass: IN
nSRecord: ${funchosts['router']}.
aRecord: ${routerifs['pubif']}
{% if 'mail' in funchosts %}\
mXRecord: 10 ${funchosts['mail']}.
{% end %}\
sOARecord: ${funchosts['router']}. itadmin.${domain_name}. 2015112701 3600 1800 720000 6400

# ${funchosts['router']}, dhcp, ${funchosts['router']}, servers, systems, ${domain_name}
dn: cn=${funchosts['router']},cn=dhcp,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
dhcpOption: host-name ${funchosts['router']}
dhcpStatements: fixed-address ${routerifs['pubif']}
cn: ${funchosts['router']}
objectClass: top
objectClass: dhcpHost
dhcpHWAddress: ethernet ${routerifmacs['pubif']}

# ${funchostsshort['router']}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=${funchostsshort['router']},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: ${funchostsshort['router']}

# ${funchostsshort['router']}, ${funchostsshort['router']}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=router,relativeDomainName=router,zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: ${funchostsshort['router']}
aRecord: ${routerifs['pubif']}

# ns1, ${funchostsshort['router']}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=ns1,relativeDomainName=${funchostsshort['router']},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: ns1
cNAMERecord: ${funchostsshort['router']}

# ${srvlasttwo['router']}, ${funchostsshort['router']}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=${srvlasttwo['router']},relativeDomainName=${funchostsshort['router']},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${zonename}
relativeDomainName: ${srvlasttwo['router']}
pTRRecord: ${funchosts['router']}.
{% end if have_router %}\

{% python
  remaining_hosts=funchosts.copy();
  # pop the router (it is already defined)
  remaining_hosts.pop("router", None)
  # the remaining hosts are supposed to have a single interface.
%}\
{% for host in remaining_hosts %}\
# ${funchosts[host]}, servers, systems, ${domain_name}
dn: cn=${funchosts[host]},ou=servers,ou=systems,${ldap_root}
cn: ${funchosts[host]}
{% if host in funchostdesc %}\
description: ${funchostdesc[host]}
{% end %}\
gotoMode: active
ipHostNumber: ${srvips[host]}
macAddress: ${srvmacs[host]}
objectClass: top
objectClass: GOhard
objectClass: goServer

{% if have_router %}\
# ${funchosts[host]}, dhcp, ${funchosts['router']}, servers, systems, ${domain_name}
dn: cn=${funchosts[host]},cn=dhcp,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
dhcpOption: host-name ${funchosts[host]}
dhcpStatements: fixed-address ${srvips[host]}
cn: ${funchosts[host]}
objectClass: top
objectClass: dhcpHost
dhcpHWAddress: ethernet ${srvmacs[host]}

# ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: ${funchostsshort[host]}

# ${funchostsshort[host]}, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=${funchostsshort[host]},relativeDomainName=${funchostsshort['DMZsmtp']},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: ${funchostsshort[host]}
aRecord: ${srvips[host]}

{% if host == 'config' %}\
# autoconfig, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=autoconfig,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: autoconfig
cNAMERecord: ${funchostsshort[host]}

# packages, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=packages,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: packages
cNAMERecord: ${funchostsshort[host]}

# gosa, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=gosa,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: gosa
cNAMERecord: ${funchostsshort[host]}

# kdc1, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=kdc1,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: kdc1
cNAMERecord: ${funchostsshort[host]}

# ldap1, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=ldap1,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: ldap1
cNAMERecord: ${funchostsshort[host]}

{% end %}\
{% if host == 'monitor' and install_zabbix %}\
# zabbix, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=zabbix,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: zabbix
cNAMERecord: ${funchostsshort[host]}

{% end %}\
{% if host == 'proxy' %}\
# kdc2, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=kdc2,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: kdc2
cNAMERecord: ${funchostsshort[host]}

# ldap2, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=ldap2,relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${domain_name}.
relativeDomainName: ldap2
cNAMERecord: ${funchostsshort[host]}

{% end %}\
# ${srvlasttwo[host]}, ${funchostsshort[host]}, ${domain_name}., ${funchosts['router']}, servers, systems, ${domain_name}
dn: relativeDomainName=${srvlasttwo[host]},relativeDomainName=${funchostsshort[host]},zoneName=${domain_name}.,cn=${funchosts['router']},ou=servers,ou=systems,${ldap_root}
objectClass: top
objectClass: dNSZone
dNSClass: IN
zoneName: ${zonename}
relativeDomainName: ${srvlasttwo[host]}
pTRRecord: ${funchosts[host]}.
{% end if have_router %}\

{% end %}\
